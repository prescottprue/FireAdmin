stages:
  - verify
  - build
  - deploy_staging
  - e2e_tests
  - build_production
  - deploy_production

# Cache dependencies across jobs only pulling not uploading (upload to cache
# happens in build stage)
cache:
  policy: pull # only pull cache, skip uploading
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .yarn
    - $CYPRESS_CACHE_FOLDER

# Script run before all stages unless otherwise overriden
before_script:
  - CYPRESS_INSTALL_BINARY=0 yarn install --frozen-lockfile --cache-folder .yarn # Install dependencies skipping Cypress

variables:
  CYPRESS_CACHE_FOLDER: $CI_PROJECT_DIR/cache/Cypress

# Unit Testing Stage
# Run unit tests for Cloud Functions
Verify Functions:
  stage: verify
  image: node:10
  only:
    changes:
      - functions/**/* # Run only when functions are changed
      - firebase.json
      - .gitlab-ci.yml
  allow_failure: true
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-tests/
      - $CI_COMMIT_MESSAGE =~ /skip-verify/
      - $CI_COMMIT_MESSAGE =~ /skip-unit-tests/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    paths:
      - functions/coverage # Test coverage report
  # Override cache behavior set above since we want to both pull and push to
  # the cache (no "policy" provided since pull-push is default)
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .yarn
  before_script:
    - CYPRESS_INSTALL_BINARY=0 yarn install --frozen-lockfile --cache-folder .yarn # Install dependencies skipping Cypress
    - yarn --cwd functions install --frozen-lockfile --cache-folder .yarn # Install functions dependencies
  script:
    - yarn lint:functions # Check for lint within functions
    - yarn --cwd functions test:cov # Run unit tests with coverage
    - yarn --cwd functions build # Build to confirm no build errors

# ---------------------------- Packages -------------------------- #
# Build Docs
## Installs dependencies, builds app, and saves results for later (artifacts)
Build Packages:
  stage: build
  image: node:8
  only:
    changes:
      - docs/**/* # Run only when docs are changed
      - firebase.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
      - $CI_COMMIT_MESSAGE =~ /skip-packages-build/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - packages/**/lib
      - packages/**/lib-esm
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .yarn
  script:
    - yarn lint:packages
    - yarn build:packages

Deploy Packages:
  stage: deploy_production
  image: node:8
  when: on_success
  only:
    refs:
      - master
    changes:
      - packages/**/* # Run only when packages are changed
      - lerna.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-docs-build/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-deploy/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - packages/**/lib
      - packages/**/lib-esm
  dependencies:
    - Build Packages # Require artifacts from build stage
  before_script:
    - CYPRESS_INSTALL_BINARY=0 yarn install --frozen-lockfile --cache-folder .yarn # Install dependencies skipping Cypress
    - lerna bootstrap # install package dependencies
  script:
    - lerna publish  # Publish packages

# ---------------------------- Docs -------------------------- #
# Build Docs
## Installs dependencies, builds app, and saves results for later (artifacts)
Build Docs:
  stage: build
  image: node:10
  only:
    changes:
      - docs/**/* # Run only when docs are changed
      - firebase.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-build/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-deploy/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - docs/public
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .yarn
  before_script:
    - CYPRESS_INSTALL_BINARY=0 yarn install --frozen-lockfile --cache-folder .yarn # Install dependencies skipping Cypress
    - yarn --cwd docs install --frozen-lockfile --cache-folder .yarn # Install docs dependencies
  script:
    - yarn lint:docs
    - yarn --cwd docs build

# Deploy Docs
## Deploy Docs to Firebase Hosting
Deploy Docs Staging:
  stage: deploy_staging
  image: node:10
  when: on_success
  only:
    refs:
      - master
    changes:
      - docs/**/* # Run only when docs are changed
      - firebase.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-docs-build/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-deploy/
  environment:
    name: docs-staging
    url: https://fireadmin-stage-docs.firebaseapp.com
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - docs/public
  dependencies:
    - Build Docs # Require artifacts from build stage
  script:
    - yarn deploy --only hosting:stageDocs  # Deploy docs React App (Firebase Hosting)

Deploy Docs Production:
  stage: deploy_production
  image: node:10
  when: manual # Only allow run through button on Gitlab site
  only:
    refs:
      - master
    changes:
      - docs/**/* # Run only when docs are changed
      - firebase.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-docs/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-build/
      - $CI_COMMIT_MESSAGE =~ /skip-docs-deploy/
  variables:
    FIREBASE_CI_PROJECT: prod # deploy using stage-docs project in .firebaserc
  environment:
    name: docs-production
    url: https://fireadmin-docs.firebaseapp.com
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - docs/public
  dependencies:
    - Build Docs # Require artifacts from build stage
  script:
    - yarn deploy --only hosting:docs # Deploy docs React App (Firebase Hosting)

# ---------------------------- React App -------------------------- #
# Build Staging App
# Installs dependencies, builds app, and saves results for later (artifacts).
# 1. Install dependencies for React App and Cloud Functions. Installing of
# cypress binary is skipped (done in E2E Testing Stage)
# 2. Build environment specific config file in src/config.js
# 3. Confirm there is no lint within code (after config is injected for import linting)
# 4. Build React app to dist folder
# 5. Preserve build results and dependencies for future jobs in the pipeline
Build Staging:
  stage: build
  image: node:10
  only:
    changes:
      - src/**/* # Run only when app is changed
      - package.json
      - .eslintrc.js
      - firebase.json
      - .gitlab-ci.yml
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - dist
  script:
    - yarn build:config # create env specific src/config.js
    - yarn lint:app # confirm there is no lint in app code
    - yarn build # build app bundles
    - yarn size # confirm that bundles have not grown too much

# Deploy Staging
# Deploy React App and Cloud Functions
Deploy Staging:
  stage: deploy_staging
  image: node:10
  environment:
    name: staging
    url: https://fireadmin-stage.firebaseapp.com
  when: on_success
  only:
    - master
    - web
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/ # no build to deploy if it was skipped
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-stage-deploy/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 1 weeks
    when: on_failure
    paths:
      - firebase-debug.log
  dependencies:
    - Build Staging # Require artifacts from build stage
  script:
    - yarn deploy --only hosting:stageApp,functions,storage,database,firestore  # Deploy docs React App (Firebase Hosting), Cloud Functions, and All Rules

# End To End Tests
# Install Cypress binary and run end to end tests using Cypress
UI Tests:
# .uitest_template: &job
  stage: e2e_tests
  image: cypress/base:10
  when: on_success
  allow_failure: true
  only:
    - master
    - libraries-together
    - web
    - schedules
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-tests/
      - $CI_COMMIT_MESSAGE =~ /skip-ui-tests/
  # Cache dependencies across jobs only pulling not uploading (upload to cache
  # happens in build stage)
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_JOB_STAGE
    # NOTE: Folders used since npm cache ($HOME/.npm) does not persist
    paths:
      - .yarn
      - node_modules
      - cache/Cypress
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 2 weeks
    when: always
    paths:
      - cypress/videos
      - cypress/screenshots
      - cypress.env.json
  before_script:
    # Update dev dependencies to only be cypress and cypress-firebase (for quicker install time)
    - build/install-only.js cypress cypress-firebase lodash
    # Set TEST_ENV to CI_COMMIT_REF_SLUG (i.e. branch) only if it is not set
    - if [ -z "$TEST_ENV" ]; then export TEST_ENV=$CI_COMMIT_REF_SLUG; fi
    # Set TEST_SPEC_ARG if TEST_SPECS env variable is set (allowing to run only a subset of tests)
    - if [ -z "$TEST_SPECS" ]; then export TEST_SPEC_ARG="--spec \"$TEST_SPECS\""; fi
    # Install only dev deps including Cypress binary (skipped in default before_script)
    - yarn install --production=true
    # Confirm Cypress is ready to use
    - $(npm bin)/cypress verify
    # Create Environment specific src/config.js file
    - $(npm bin)/cypress-firebase createTestEnvFile $TEST_ENV
  script:
    # Create environment specific test config including auth token
    # (saved to cypress.env.json) then run E2E Tests through Cypress in load balancing mode
    - cypress run --env envName=$TEST_ENV --record --key $CYPRESS_KEY
    # To run in parallel, uncomment the following line, the job definitions (below), and the job template name (above)
    # - yarn test:ui:stage -- --record --key $CYPRESS_KEY --parallel --ci-build-id $CI_PIPELINE_ID --group uitests

# actual job definitions
# all steps are the same, they come from the template above
# uitests-1:
#   <<: *job
# uitests-2:
#   <<: *job
# uitests-3:
#   <<: *job
# uitests-4:
#   <<: *job
# uitests-5:
#   <<: *job

# Build Production version of bundle (has different config)
Build Prod App:
  stage: build_production
  image: node:10
  when: on_success
  only:
    - master
    - prod
    - web
  variables:
    FIREBASE_CI_PROJECT: "prod" # deploy using prod project in .firebaserc
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
      - $CI_COMMIT_MESSAGE =~ /skip-prod-build/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 1 week
    when: always
    paths:
      - dist
  script:
    - yarn clean # remove existing dist folder
    - yarn build:config # create env specific src/config.js
    - yarn build # rebuild bundle with new config
    # Note: Functions are not rebuilt since a bundle with env specific config
    # is not created as with React App

# Deploy Production
# Deploy React App and Cloud Functions to production environment
Deploy Production:
  stage: deploy_production
  image: node:10
  environment:
    name: production
    url: https://fireadmin.io
  when: manual # Only allow run through button on Gitlab site
  only:
    - master
    - prod
    - web
  variables:
    FIREBASE_CI_PROJECT: "prod" # deploy using prod project in .firebaserc
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-prod-deploy/
      - $CI_COMMIT_MESSAGE =~ /skip-build/ # no build to deploy if it was skipped
      - $CI_COMMIT_MESSAGE =~ /skip-prod-build/
  artifacts:
    name: $CI_JOB_STAGE-$CI_COMMIT_REF_SLUG
    expire_in: 1 week
    when: on_failure
    paths:
      - firebase-debug.log
  script:
    - yarn deploy --only hosting:app,functions,storage,database,firestore # Deploy Cloud Functions and React App (Firebase Hosting)
