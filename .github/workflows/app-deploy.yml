name: Deploy App

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - master
      - prod

jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        env:
          CYPRESS_INSTALL_BINARY: 0 # Skip installing of cypress
        run: |
          yarn install --frozen-lockfile
          yarn --cwd functions install --frozen-lockfile

      - name: Archive Error Logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: error-logs
          path: yarn-error.log

      - name: Build App Config
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          yarn build:config

      - name: Verify
        run: |
          yarn lint

      - name: Verify Functions
        # NOTE: Project name is hardcoded since emulators are being used
        run: |
          yarn functions:build
          yarn --cwd functions test:cov --project fireadmin-stage

      - name: Upload Functions Test Coverage
        run: |
          bash <(curl -s https://codecov.io/bash) -f functions/coverage/lcov.info || 'Test Coverage Upload Failed, continuing'
    
      - name: Build App
        run: |
          yarn build

      - name: Build Functions
        run: |
          yarn --cwd functions build

      # - name: Archive Build Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: app-build
      #     path: build

      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          export FIREBASE_TARGETS=hosting:app$(if [ "${GITHUB_REF##*/}" = "stage" ]; then echo "Stage"; fi;),functions,storage,database,firestore
          $(yarn bin)/firebase-ci deploy --only --force $FIREBASE_TARGETS

      # Write new version to core database (causes client to refresh)
      - name: Update Version In Database
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          gitBranch=${GITHUB_REF##*/}
          packageName=$(cat package.json | jq -r '.name')
          packageVersion=$(cat package.json | jq -r '.version')
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$gitBranch" '.projects[$alias] // .projects.default')
          echo "::set-env name=PACKAGE_VERSION::$packageVersion"

          echo Updating DB path \"/versionInfo/${packageName}/current\" value to version \"$packageVersion\"

          $(yarn bin)/firebase database:update \
            -d "$(jq -n --arg version "$packageVersion" '{current: $version}')" \
            -y --project $gcloudProject \
            "/versionInfo/${packageName}"

      - name: Archive Debug Log
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: firebase-debug
          path: firebase-debug.log

      - name: Upload SourceMaps to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: pruvit
        run: |
          version=$(cat package.json | jq  .version -r)
          gitBranch=${GITHUB_REF##*/}
          envName=$(if [ $gitBranch == "master" ]; then echo staging; else echo $gitBranch; fi;)
          releaseName=$envName@$version
          export SENTRY_PROJECT=fireadmin
          echo ""
          echo Creating Sentry release \"$releaseName\" for project \"$SENTRY_PROJECT\"
          $(yarn bin)/sentry-cli releases new $releaseName --finalize
          echo Uploading source maps to Sentry
          $(yarn bin)/sentry-cli releases files $releaseName upload-sourcemaps ./build/static/js --no-rewrite
          echo Associate commits with the release
          $(yarn bin)/sentry-cli releases set-commits --auto $version

      - name: Check if version has been updated
        if: github.ref == 'refs/heads/prod'
        id: check
        uses: EndBug/version-check@v1

      - name: Create Release
        if: github.ref == 'refs/heads/prod' && steps.check.outputs.changed == 'true'
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false

  # # Uncomment following job to enable UI testing after deployment
  # ui-tests:
  #   name: UI Test Hosted App
  #   needs: build
  #   runs-on: ubuntu-16.04
  #   if: ${{ env.RUN_HOSTED_TESTS }} == true && github.ref == 'refs/heads/stage'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # Run multiple copies of the current job in parallel
  #       containers: [1, 2, 3, 4]
  #   steps:
  #     - name: Setup Node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 10

  #     - name: Checkout Repo
  #       uses: actions/checkout@v2

  #     - name: Get yarn cache
  #       id: yarn-cache
  #       run: echo "::set-output name=dir::$(yarn cache dir)"

  #     - name: Cache npm dependencies
  #       uses: actions/cache@v1
  #       with:
  #         path: ${{ steps.yarn-cache.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

  #     - name: Get Library Versions For Binary Caching
  #       id: dep-versions
  #       run: |
  #         echo "::set-output name=cypress::$(cat package.json | jq -r .devDependencies.cypress)"

  #     - name: Cache Cypress Binary
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.cache/Cypress
  #         key: ${{ runner.os }}-cypress-${{ steps.dep-versions.outputs.cypress }}

  #     # Install is run separately from test so that dependencies are available
  #     # for other steps like Get Project Info and build test environment config
  #     - name: Install Dependencies
  #       run: |
  #         yarn install --frozen-lockfile
  #         $(yarn bin)/cypress verify

  #     - name: Archive Error Logs
  #       uses: actions/upload-artifact@v1
  #       if: failure()
  #       with:
  #         name: test-error-logs
  #         path: yarn-error.log

  #     - name: Set Test Environment Settings
  #       id: emulator-settings
  #       run: |
  #         export GIT_BRANCH=${GITHUB_REF##*/}
  #         export GCLOUD_PROJECT=$(cat .firebaserc | jq -r --arg GIT_BRANCH "$GIT_BRANCH" '.projects[$GIT_BRANCH] // .projects.master')
  #         echo "::set-output name=GCLOUD_PROJECT::$GCLOUD_PROJECT"
  #         echo "::set-env name=CYPRESS_BASE_URL::https://$GCLOUD_PROJECT.firebaseapp.com"

  #     # Cypress action manages installing/caching npm dependencies and Cypress binary.
  #     # Because of "record" and "parallel" parameters these containers will load
  #     # balance all found tests among themselves. The step tests a version of the app
  #     # which is running locally in the container on port 3000
  #     - name: Cypress Run
  #       uses: cypress-io/github-action@v1
  #       with:
  #         # we have already installed all dependencies above
  #         install: false
  #         browser: chrome
  #         tag: hosted
  #         parallel: true
  #         record: true
  #         headless: true
  #         group: 'UI Tests'
  #       env:
  #         # TODO: Look into if this can be moved to an npm script
  #         TZ: America/Los_Angeles
  #         CI: true
  #         # Pass the Dashboard record key as an environment variable
  #         GITHUB_HEAD_REF: ${{ github.head_ref }}
  #         GITHUB_REF: ${{ github.ref }}
  #         FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  #         SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  #         CYPRESS_TEST_UID: ${{ secrets.TEST_UID }}
