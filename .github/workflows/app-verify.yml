name: Verify App

on: 
  pull_request:
    paths-ignore:
      - 'docs/**'

jobs:
  verify-build:
    name: Verify + Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Get cache settings
        id: cache-settings
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=firebase-tools::$(yarn list -s --depth=0 --pattern firebase-tools | tail -n 1 | sed 's/.*@//g')"

      - name: Get Yarn Cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache NPM Dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        env:
          CYPRESS_INSTALL_BINARY: 0 # Skip installing of cypress
        run: |
          yarn install --frozen-lockfile
          yarn --cwd functions install --frozen-lockfile

      - name: Verify Functions
        # NOTE: Project name is hardcoded since emulators are being used
        run: |
          yarn functions:build
          yarn --cwd functions test:cov || echo "::warning::Functions unit tests failed"

      - name: Upload Functions Test Coverage
        uses: codecov/codecov-action@v1
        with:
          file: functions/coverage/lcov.info

      - name: Verify
        run: yarn lint

      - name: Expose Application Environment Variables
        env:
          GITHUB_REF: ${{ github.ref }}
          # Firebase token needed to authenticate firebase-tools to be able to load app configs
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -o pipefail

          gitBranch=${GITHUB_REF##*/}

          # Find the config associated to the firebase project in .firebaserc
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$gitBranch" '.projects[$alias]  // .projects.default')

          echo Exporting Firebase SDK Config for $gcloudProject project...

          # Use firebase SDK API to get the app's configuration (databaseURL is removed since it is set to the emulator URL)
          firebaseConfig=$($(yarn bin)/firebase --project $gcloudProject apps:sdkconfig WEB \
            $($(yarn bin)/firebase --project $gcloudProject apps:list WEB | grep fireadmin | awk '{ print $4}') | \
              tr '\n' ' ' | \
              sed 's/.*initializeApp(//g' | \
              sed 's/);//g' | \
              jq -r 'del(.databaseURL) | to_entries[] | [.key, (.value | tojson)] | join("::")' | \
              sed 's/:"/:/g; s/^/echo \"::set-env name=REACT_APP_FIREBASE_/g' \
          )

          # Set emulator settings
          echo "::set-env name=REACT_APP_FIREBASE_DATABASE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.database.port)"
          echo "::set-env name=REACT_APP_FIRESTORE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.firestore.port)"

          # Set other app configs (settings within .firebaserc in the ci.setEnv section)
          $(yarn bin)/firebase-ci setEnv

          echo Begin evaluating project config to export as environment variables:

          # Loop through each line of config and evaluate to export env vars
          while IFS= read -r line; do
            echo Evaluating: $line
            eval $line
          done <<< "$firebaseConfig"

      - name: Print CI Env Variables
        run: |
          echo Available ENV vars:
          env | sort

      - name: Build App
        run: |
          yarn build

      - name: Archive Error Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: error-logs
          path: yarn-error.log

      - name: Archive Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

  ui-tests:
    name: UI Test Emulated App
    needs: verify-build
    runs-on: ubuntu-16.04
    strategy:
      # Keep all in-progress jobs running if any matrix job fails. Needed to prevent
      # the Cypress Dashboard from being stuck in "in progress" state since not all tests run.
      # See the following for more details:
      # * Cypress Action Issue: https://github.com/cypress-io/github-action/issues/48
      # * Docs for fail-fast: https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      fail-fast: false
      matrix:
        # Run multiple copies of the current job in parallel
        containers: [1, 2, 3, 4]
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Get Cache Settings
        id: cache-settings
        run: |
          echo "::set-output name=firebase-tools::$(yarn list -s --depth=0 --pattern firebase-tools | tail -n 1 | sed 's/.*@//g')"

      - name: Cache Firebase Emulator Binaries
        uses: actions/cache@v1
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-${{ steps.cache-settings.outputs.firebase-tools }}

      - name: Set Test Environment Settings
        id: emulator-settings
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          gitBranch=${GITHUB_REF##*/}
          gcloudProject=$(cat .firebaserc | jq -r --arg branch "$gitBranch" '.projects[$branch] // .projects.master')
          
          echo "Exposing settings to environment for branch: $gitBranch and project: $gcloudProject..."
          echo "::set-env name=GCLOUD_PROJECT::$gcloudProject"
          echo "::set-env name=FIREBASE_DATABASE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.database.port)"
          echo "::set-env name=FIRESTORE_EMULATOR_HOST::localhost:$(cat firebase.json | jq .emulators.firestore.port)"
          echo "::set-env name=CYPRESS_BASE_URL::http://localhost:$(cat package.json | jq .config.port)"

          echo "Generating Service Account File..."
          echo "$(echo $SERVICE_ACCOUNT | jq .)" > $HOME/serviceAccount.json
          echo "::set-env name=GOOGLE_APPLICATION_CREDENTIALS::$HOME/serviceAccount.json"

      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      # Cypress action manages installing/caching npm dependencies and Cypress binary.
      # Because of "record" and "parallel" parameters these containers will load
      # balance all found tests among themselves. The step tests a version of the app
      # which is running locally in the container on port 3000
      - name: Cypress Run
        uses: cypress-io/github-action@v1
        with:
          browser: chrome
          parallel: true
          record: true
          headless: true
          group: 'UI Integration Tests'
          tag: emulated
          start: yarn emulate:all --project ${{ env.GCLOUD_PROJECT }}
          wait-on: ${{ env.CYPRESS_BASE_URL }}
          wait-on-timeout: 120
        env:
          TZ: America/Los_Angeles
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_KEY }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
          CYPRESS_TEST_UID: ${{ secrets.TEST_UID }}